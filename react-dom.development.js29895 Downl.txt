import React, { useState, useMemo } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { NormalizedResult } from '@/components/results/types';
import TableEnhancer from '@/components/tables/TableEnhancer';
import SqlQueryDisplay from './SqlQueryDisplay';
import { Globe, ExternalLink, Copy, Download } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ResultsModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  allResults: {
    sql: NormalizedResult[];
    embedding: NormalizedResult[];
    web: NormalizedResult[];
  };
  activeTab: 'sql' | 'embedding' | 'web' | 'all';
}

const ResultsModal: React.FC<ResultsModalProps> = ({
  isOpen,
  onClose,
  title,
  allResults,
  activeTab
}) => {
  const [selectedTab, setSelectedTab] = useState<string>(activeTab);
  const { toast } = useToast();

  // Extract SQL query from any SQL result that has one
  const getSqlQuery = () => {
    for (const result of allResults.sql || []) {
      if (result.record?.query) return result.record.query;
      if (result.record?.sql) return result.record.sql;
    }
    return null;
  };

  // Get data for current tab
  const getCurrentTabData = () => {
    switch (selectedTab) {
      case 'all':
        return [...(allResults.sql || []), ...(allResults.embedding || [])];
      case 'sql':
        return allResults.sql || [];
      case 'embedding':
        return allResults.embedding || [];
      case 'web':
        return allResults.web || [];
      default:
        return [];
    }
  };

  const currentData = getCurrentTabData();
  const sqlQuery = selectedTab === 'sql' ? getSqlQuery() : null;

  // Build column list with smart fallback for embedding
  const columns = useMemo(() => {
    const set = new Set<string>();

    currentData.forEach((r) => {
      Object.keys(r.record || {}).forEach((k) => set.add(k));
    });

    const seed = ["table", "title", "content", "snippet", "name", "device_name", "plan_name"];
    seed.forEach((k) => set.add(k));

    const priority = [
      "table",
      "title",
      "name",
      "device_name",
      "plan_name",
      "content",
      "snippet",
      "primary_id",
      "internal_id",
      "product_id",
      "amount",
      "availability",
      "brand",
      "brand_name",
      "description",
      "device_type",
      "is_new",
      "timestamp",
    ];

    if (selectedTab === "embedding" && set.size < 3) {
      ["table", "title", "content"].forEach((k) => set.add(k));
    }

    const rest = Array.from(set).filter((k) => !priority.includes(k));
    return [...priority.filter((k) => set.has(k)), ...rest];
  }, [currentData, selectedTab]);

  // Render value with fallbacks for embedding
  const renderCellValue = (r: NormalizedResult, key: string) => {
    let v = r.record?.[key];

    if (v === undefined || v === null) {
      if (key === "table") v = r.table ?? r.record?.table_name;
      else if (key === "title")
        v = r.title ?? r.record?.name ?? r.record?.device_name ?? r.record?.plan_name;
      else if (key === "content" || key === "snippet")
        v = r.record?.content ?? r.record?.snippet;
    }

    if (v === undefined || v === null)
      return <span className="text-muted-foreground italic">null</span>;

    if (typeof v === "object")
      return <code className="text-xs bg-muted px-1 py-0.5 rounded">{JSON.stringify(v)}</code>;

    return String(v);
  };

  // Export CSV for current tab
  const exportCSV = () => {
    const rows = currentData.map((r) => r.record).filter(Boolean);
    if (rows.length === 0) {
      toast({
        title: "No data to export",
        description: "The current tab has no data to export.",
        variant: "destructive",
      });
      return;
    }

    const cols = Array.from(new Set(rows.flatMap(r => Object.keys(r))));
    const csvHeader = cols.join(',');
    const csvRows = rows.map(row =>
      cols.map(col => {
        const value = row[col];
        if (value === null || value === undefined) return '';
        const str = typeof value === 'object' ? JSON.stringify(value) : String(value);
        if (str.includes(',') || str.includes('"') || str.includes('\n'))
          return `"${str.replace(/"/g, '""')}"`;
        return str;
      }).join(',')
    );

    const csv = [csvHeader, ...csvRows].join('\n');
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${selectedTab}-results-${Date.now()}.csv`;
    link.click();
    URL.revokeObjectURL(url);

    toast({
      title: "CSV exported",
      description: `${selectedTab} results have been exported as CSV`,
    });
  };

  const renderTableResults = () => {
    if (currentData.length === 0) {
      return (
        <Card className="p-4">
          <p>No {selectedTab} results available.</p>
        </Card>
      );
    }

    return (
      <div className="space-y-4">
        {sqlQuery && selectedTab === 'sql' && <SqlQueryDisplay query={sqlQuery} />}
        <div className="overflow-auto max-h-[60vh]">
          <TableEnhancer>
            <table className="min-w-max w-full text-sm">
              <thead className="sticky top-0 bg-muted z-10">
                <tr className="border-b">
                  {selectedTab === 'all' && <th className="p-2 text-left">Source</th>}
                  <th className="p-2 text-left">Score</th>
                  {columns.map((c) => (
                    <th key={c} className="p-2 text-left font-medium" title={c}>
                      {c}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="[&>tr>td]:align-top">
                {currentData.slice(0, 100).map((r, idx) => {
                  const src = r.result_source;
                  const score =
                    typeof r.result_score === 'number'
                      ? r.result_score
                      : Number(r.result_score) || 0;

                  return (
                    <tr key={r.id ?? idx} className="border-b hover:bg-muted/50 whitespace-nowrap">
                      {selectedTab === 'all' && (
                        <td className="p-2">
                          <Badge variant={src === 'embedding' ? 'default' : 'secondary'}>
                            {src === 'embedding' ? 'Embedding' : 'SQL'}
                          </Badge>
                        </td>
                      )}
                      <td className="p-2">{score ? score.toFixed(4) : 'â€”'}</td>
                      {columns.map((c) => (
                        <td key={c} className="p-2">
                          {renderCellValue(r, c)}
                        </td>
                      ))}
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </TableEnhancer>
        </div>
      </div>
    );
  };

  // Determine available tabs
  const hasSQL = (allResults.sql || []).length > 0;
  const hasEmbedding = (allResults.embedding || []).length > 0;
  const hasWeb = (allResults.web || []).length > 0;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[85vh] flex flex-col">
        <DialogHeader className="flex-shrink-0">
          <div className="flex items-center justify-between">
            <DialogTitle>{title}</DialogTitle>
            <Button
              variant="outline"
              size="sm"
              onClick={exportCSV}
              disabled={getCurrentTabData().length === 0}
            >
              <Download className="w-3 h-3 mr-1" />
              Export CSV
            </Button>
          </div>
        </DialogHeader>

        <div className="flex-1 overflow-hidden">
          <Tabs value={selectedTab} onValueChange={setSelectedTab} className="h-full flex flex-col">
            <TabsList className="flex-shrink-0 grid w-full grid-cols-4">
              {(hasSQL || hasEmbedding) && (
                <TabsTrigger value="all">
                  All Results ({(allResults.sql || []).length + (allResults.embedding || []).length})
                </TabsTrigger>
              )}
              {hasSQL && <TabsTrigger value="sql">SQL Results ({allResults.sql.length})</TabsTrigger>}
              {hasEmbedding && (
                <TabsTrigger value="embedding">Embedding Results ({allResults.embedding.length})</TabsTrigger>
              )}
              {hasWeb && (
                <TabsTrigger value="web">Web Results ({allResults.web.length})</TabsTrigger>
              )}
            </TabsList>

            <div className="flex-1 overflow-hidden">
              <TabsContent value="all" className="h-full overflow-y-auto max-h-[65vh] p-1">
                {renderTableResults()}
              </TabsContent>
              <TabsContent value="sql" className="h-full overflow-y-auto max-h-[65vh] p-1">
                {renderTableResults()}
              </TabsContent>
              <TabsContent value="embedding" className="h-full overflow-y-auto max-h-[65vh] p-1">
                {renderTableResults()}
              </TabsContent>
              <TabsContent value="web" className="h-full overflow-y-auto max-h-[65vh] p-1">
                {/* Keep your renderWebResults if needed */}
              </TabsContent>
            </div>
          </Tabs>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ResultsModal;
