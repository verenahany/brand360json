import React, { useEffect, useMemo, useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { NormalizedResult } from "@/components/results/types";
import TableEnhancer from "@/components/tables/TableEnhancer";
import SqlQueryDisplay from "./SqlQueryDisplay";
import { Globe, ExternalLink, Copy, Download } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface ResultsModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  allResults: {
    sql: NormalizedResult[];
    embedding: NormalizedResult[];
    web: NormalizedResult[];
  };
  activeTab: "sql" | "embedding" | "web" | "all";
}

const ResultsModal: React.FC<ResultsModalProps> = ({
  isOpen,
  onClose,
  title,
  allResults,
  activeTab,
}) => {
  const { toast } = useToast();

  // 1) Normalize buckets in case the caller mixed sources into sql
  const normalized = useMemo(() => {
    const inputSQL = allResults.sql ?? [];
    const inputEMB = allResults.embedding ?? [];
    const inputWEB = allResults.web ?? [];

    const fromSqlEmb = inputSQL.filter((r) => r.result_source === "embedding");
    const pureSql = inputSQL.filter((r) => r.result_source !== "embedding");

    return {
      sql: pureSql,
      embedding: [...inputEMB, ...fromSqlEmb],
      web: inputWEB,
    };
  }, [allResults]);

  const sqlData = normalized.sql;
  const embData = normalized.embedding;
  const webData = normalized.web;

  const sqlCount = sqlData.length;
  const embCount = embData.length;
  const webCount = webData.length;
  const allCount = sqlCount + embCount;

  const hasSQL = sqlCount > 0;
  const hasEmbedding = embCount > 0;
  const hasWeb = webCount > 0;

  // 2) Selected tab (auto-pick on open)
  const [selectedTab, setSelectedTab] = useState<string>("all");
  useEffect(() => {
    if (!isOpen) return;

    // prefer caller’s choice when it has data
    const preferred = activeTab ?? "all";
    const ok =
      (preferred === "all" && allCount > 0) ||
      (preferred === "sql" && hasSQL) ||
      (preferred === "embedding" && hasEmbedding) ||
      (preferred === "web" && hasWeb);

    if (ok) {
      setSelectedTab(preferred);
    } else if (hasSQL && hasEmbedding) {
      setSelectedTab("all");
    } else if (hasSQL) {
      setSelectedTab("sql");
    } else if (hasEmbedding) {
      setSelectedTab("embedding");
    } else if (hasWeb) {
      setSelectedTab("web");
    } else {
      setSelectedTab("all");
    }
  }, [isOpen, activeTab, hasSQL, hasEmbedding, hasWeb, allCount]);

  // 3) Data for the active tab
  const currentData: NormalizedResult[] = useMemo(() => {
    switch (selectedTab) {
      case "sql":
        return sqlData;
      case "embedding":
        return embData;
      case "web":
        return webData;
      case "all":
      default:
        return [...sqlData, ...embData];
    }
  }, [selectedTab, sqlData, embData, webData]);

  // 4) SQL query preview (only for SQL tab)
  const sqlQuery = useMemo(() => {
    if (selectedTab !== "sql") return null;
    for (const r of sqlData) {
      if (r.record?.query) return r.record.query;
      if (r.record?.sql) return r.record.sql;
    }
    return null;
  }, [selectedTab, sqlData]);

  // 5) Columns (union) with sensible order
  const columns = useMemo(() => {
    const set = new Set<string>();
    currentData.forEach((r) => Object.keys(r.record || {}).forEach((k) => set.add(k)));

    const priority = [
      "table",
      "title",
      "name",
      "device_name",
      "plan_name",
      "question",
      "primary_id",
      "internal_id",
      "product_id",
      "amount",
      "availability",
      "brand",
      "brand_name",
      "description",
      "device_type",
      "is_new",
      "timestamp",
      "content",
      "snippet",
    ];
    const rest = Array.from(set).filter((k) => !priority.includes(k));
    return [...priority.filter((k) => set.has(k)), ...rest];
  }, [currentData]);

  // 6) CSV export
  const exportCSV = () => {
    if (currentData.length === 0) {
      toast({ title: "No data to export", description: "The current tab has no data to export.", variant: "destructive" });
      return;
    }
    const header = ["result_source", "result_score", ...columns];
    const rows = currentData.map((r) => {
      const cells = columns.map((c) => {
        const v = r.record?.[c];
        const s = v == null ? "" : typeof v === "object" ? JSON.stringify(v) : String(v);
        return /[",\n]/.test(s) ? `"${s.replace(/"/g, '""')}"` : s;
      });
      return [r.result_source ?? "", r.result_score ?? "", ...cells].join(",");
    });
    const csv = [header.join(","), ...rows].join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${selectedTab}-results-${Date.now()}.csv`;
    a.click();
    URL.revokeObjectURL(url);
    toast({ title: "CSV exported", description: "Download started." });
  };

  // 7) Web results (unchanged)
  const renderWebResults = () => {
    if (webCount === 0) return <Card className="p-4"><p>No web results available.</p></Card>;
    return (
      <div className="space-y-4">
        {webData.map((result, i) => {
          const record = result.record || {};
          const title = record.title || result.title || "No title";
          const url = record.url || result.url || "";
          const content = record.content || record.snippet || "No content";
          const score = result.result_score || 0;

          let domain = "Unknown source";
          try { if (url) domain = new URL(url).hostname.replace(/^www\./, ""); } catch {}

          return (
            <Card key={i} className="p-4">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <Globe className="w-4 h-4" />
                  <span>{domain}</span>
                </div>
                {score > 0 && <Badge variant="secondary">{(score * 100).toFixed(1)}% match</Badge>}
              </div>
              <h4 className="font-semibold mb-2">
                {url ? <a href={url} target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">{title}</a> : title}
              </h4>
              {url && (
                <div className="flex items-center gap-2 mb-2 text-sm">
                  <a href={url} target="_blank" rel="noopener noreferrer" className="text-muted-foreground hover:underline truncate">{url}</a>
                  <Button variant="ghost" size="sm" onClick={() => navigator.clipboard.writeText(url)} className="p-1 h-auto" title="Copy URL">
                    <Copy className="w-3 h-3" />
                  </Button>
                </div>
              )}
              <p className="text-sm text-muted-foreground mb-3">{content}</p>
              {url && (
                <Button variant="outline" size="sm" asChild>
                  <a href={url} target="_blank" rel="noopener noreferrer">
                    <ExternalLink className="w-3 h-3 mr-1" />
                    Visit Website
                  </a>
                </Button>
              )}
            </Card>
          );
        })}
      </div>
    );
  };

  const renderTableResults = () => {
    if (currentData.length === 0) {
      const label =
        selectedTab === "sql" ? "SQL" : selectedTab === "embedding" ? "Embedding" : "result";
      return <Card className="p-4"><p>No {label} data available.</p></Card>;
    }

    return (
      <div className="space-y-4">
        {selectedTab === "sql" && sqlQuery && <SqlQueryDisplay query={sqlQuery} />}
        <div className="overflow-auto max-h-[60vh]">
          <TableEnhancer>
            <table className="min-w-max w-full text-sm">
              <thead className="sticky top-0 bg-muted z-10">
                <tr className="border-b">
                  {selectedTab === "all" && <th className="p-2 text-left">Source</th>}
                  <th className="p-2 text-left">Score</th>
                  {columns.map((c) => (
                    <th key={c} className="p-2 text-left font-medium" title={c}>{c}</th>
                  ))}
                </tr>
              </thead>
              <tbody className="[&>tr>td]:align-top">
                {currentData.slice(0, 100).map((r, idx) => (
                  <tr key={r.id ?? idx} className="border-b hover:bg-muted/50 whitespace-nowrap">
                    {selectedTab === "all" && (
                      <td className="p-2">
                        <Badge variant={r.result_source === "embedding" ? "default" : "secondary"}>
                          {r.result_source === "embedding" ? "Embedding" : "SQL"}
                        </Badge>
                      </td>
                    )}
                    <td className="p-2">
                      {typeof r.result_score === "number" || !isNaN(Number(r.result_score))
                        ? Number(r.result_score).toFixed(4)
                        : "—"}
                    </td>
                    {columns.map((c) => {
                      const v = r.record?.[c];
                      return (
                        <td key={c} className="p-2">
                          {v == null ? (
                            <span className="text-muted-foreground italic">null</span>
                          ) : typeof v === "object" ? (
                            <code className="text-xs bg-muted px-1 py-0.5 rounded">{JSON.stringify(v)}</code>
                          ) : (
                            String(v)
                          )}
                        </td>
                      );
                    })}
                  </tr>
                ))}
              </tbody>
            </table>
          </TableEnhancer>
        </div>
        {currentData.length > 100 && (
          <Card className="p-3">
            <p className="text-sm text-muted-foreground">Showing first 100 rows of {currentData.length} total.</p>
          </Card>
        )}
      </div>
    );
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[85vh] flex flex-col">
        <DialogHeader className="flex-shrink-0">
          <div className="flex items-center justify-between">
            <DialogTitle>{title}</DialogTitle>
            <Button variant="outline" size="sm" onClick={exportCSV} disabled={currentData.length === 0}>
              <Download className="w-3 h-3 mr-1" />
              Export CSV
            </Button>
          </div>
        </DialogHeader>

        <div className="flex-1 overflow-hidden">
          <Tabs value={selectedTab} onValueChange={setSelectedTab} className="h-full flex flex-col">
            <TabsList
              className={`flex-shrink-0 grid w-full ${
                hasSQL && hasEmbedding && hasWeb
                  ? "grid-cols-4"
                  : hasSQL && hasEmbedding
                  ? "grid-cols-3"
                  : "grid-cols-2"
              }`}
            >
              {(hasSQL || hasEmbedding) && (
                <TabsTrigger value="all">
                  All Results <Badge className="ml-2" variant="secondary">{allCount}</Badge>
                </TabsTrigger>
              )}
              {hasSQL && (
                <TabsTrigger value="sql">
                  SQL Results <Badge className="ml-2" variant="secondary">{sqlCount}</Badge>
                </TabsTrigger>
              )}
              {hasEmbedding && (
                <TabsTrigger value="embedding">
                  Embedding Results <Badge className="ml-2" variant="secondary">{embCount}</Badge>
                </TabsTrigger>
              )}
              {hasWeb && (
                <TabsTrigger value="web">
                  Web Results <Badge className="ml-2" variant="secondary">{webCount}</Badge>
                </TabsTrigger>
              )}
            </TabsList>

            <div className="flex-1 overflow-hidden">
              <TabsContent value="all" className="h-full overflow-y-auto p-1">{renderTableResults()}</TabsContent>
              <TabsContent value="sql" className="h-full overflow-y-auto p-1">{renderTableResults()}</TabsContent>
              <TabsContent value="embedding" className="h-full overflow-y-auto p-1">{renderTableResults()}</TabsContent>
              <TabsContent value="web" className="h-full overflow-y-auto p-1">{renderWebResults()}</TabsContent>
            </div>
          </Tabs>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ResultsModal;
