import React, { useEffect, useMemo, useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Card } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Eye,
  X,
  Search as SearchIcon,
  Database,
  Globe,
  Filter,
  SortAsc,
  Download,
} from "lucide-react";
import { NormalizedResult, ResultTab, SortOption } from "./types";
import ResultDetailModal from "./ResultDetailModal";

interface EnhancedResultsPanelProps {
  isVisible: boolean;
  onClose: () => void;
  resultData: any;
  resultType?: string;
  onViewDetails?: (result: NormalizedResult) => void;
  onExportData?: (results: NormalizedResult[]) => void;
}

const EnhancedResultsPanel: React.FC<EnhancedResultsPanelProps> = ({
  isVisible,
  onClose,
  resultData,
  resultType,
  onViewDetails,
  onExportData,
}) => {
  // ---------- State ----------
  const [activeTab, setActiveTab] = useState<ResultTab>("sql");
  const [filter, setFilter] = useState("all");
  const [sortBy, setSortBy] = useState<SortOption>("relevance");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedResult, setSelectedResult] = useState<NormalizedResult | null>(null);
  const [showDetailModal, setShowDetailModal] = useState(false);

  // Scope: "latest" vs "all"
  const [scope, setScope] = useState<"latest" | "all">("latest");

  // ---------- Helpers (declare BEFORE any hook that uses them) ----------
  const determineSourceType = (record: any): "sql" | "embedding" | "web" => {
    if (record?.type === "web" || record?.url) return "web";
    if (typeof record?.result_score === "number" && record.result_score > 0) return "embedding";
    return "sql";
  };

  const processResultItem = (item: any, sourceType?: string): NormalizedResult[] => {
    if (!item) return [];

    // Arrays of items
    if (Array.isArray(item)) {
      return item.flatMap((subItem) => processResultItem(subItem, sourceType));
    }

    // Objects with .results arrays
    if (item.results && Array.isArray(item.results)) {
      return item.results.map((record: any, index: number) => ({
        id: record.id || record.internal_id || `${item.table || "result"}-${index}`,
        result_source: record.result_source || (sourceType as any) || determineSourceType(record),
        result_score: record.result_score || 0,
        table: item.table || record.table,
        type: record.type || sourceType,
        title: record.title || record.name || record.device_name,
        record,
        url: record.url || record.link,
        timestamp: record.timestamp || record.created_at,
      }));
    }

    // Single object case
    return [
      {
        id: item.id || item.internal_id || `result-${Math.random()}`,
        result_source: item.result_source || (sourceType as any) || determineSourceType(item),
        result_score: item.result_score || 0,
        table: item.table,
        type: item.type || sourceType,
        title: item.title || item.name || item.device_name,
        record: item,
        url: item.url || item.link,
        timestamp: item.timestamp || item.created_at,
      },
    ];
  };

  const formatTableType = (tableName?: string): string => {
    if (!tableName) return "Unknown";
    return tableName
      .replace(/([A-Z])/g, " $1")
      .replace(/_/g, " ")
      .replace(/^combined\s+/i, "")
      .trim()
      .replace(/\b\w/g, (l) => l.toUpperCase());
  };

  const getDisplayName = (result: NormalizedResult): string => {
    if (result.title) return result.title;
    const rec = (result.record || {}) as any;
    for (const f of ["name", "device_name", "plan_name", "question", "title"]) {
      if (rec[f]) return String(rec[f]);
    }
    return `${result.result_source} Result`;
  };

  const getTabIcon = (tab: ResultTab) => {
    switch (tab) {
      case "sql":
        return Database;
      case "embedding":
        return SearchIcon;
      case "web":
        return Globe;
    }
  };

  // Extract the "latest response" payload when scope === "latest"
  const extractLatestPayload = (data: any): any => {
    if (!data) return data;
    if (Array.isArray(data)) {
      return data.length ? extractLatestPayload(data[data.length - 1]) : data;
    }
    const candidateKeys = ["responses", "history", "turns", "items", "entries", "chunks", "results"];
    for (const key of candidateKeys) {
      const v = data?.[key];
      if (Array.isArray(v) && v.length) return extractLatestPayload(v[v.length - 1]);
    }
    return data; // assume itâ€™s the final payload
  };

  // ---------- Scope the incoming data ----------
  const scopedData = useMemo(
    () => (scope === "latest" ? extractLatestPayload(resultData) : resultData),
    [scope, resultData]
  );

  // ---------- Normalize ----------
  const {
    normalizedResults,
    counts,
    availableFilters,
  }: {
    normalizedResults: NormalizedResult[];
    counts: { sql: number; embedding: number; web: number; total: number };
    availableFilters: string[];
  } = useMemo(() => {
    if (!scopedData) {
      return {
        normalizedResults: [],
        counts: { sql: 0, embedding: 0, web: 0, total: 0 },
        availableFilters: [],
      };
    }

    let normalized: NormalizedResult[] = [];
    const filters = new Set<string>();

    try {
      if (Array.isArray(scopedData)) {
        normalized = scopedData.flatMap((item) => processResultItem(item));
      } else if (typeof scopedData === "object") {
        if (scopedData.sql) normalized.push(...processResultItem(scopedData.sql, "sql"));
        if (scopedData.embedding) normalized.push(...processResultItem(scopedData.embedding, "embedding"));
        if (scopedData.web) normalized.push(...processResultItem(scopedData.web, "web"));

        // If none of the above buckets exist but it still looks like a single result object
        if (!scopedData.sql && !scopedData.embedding && !scopedData.web) {
          normalized.push(...processResultItem(scopedData));
        }
      }

      normalized.forEach((r) => r.table && filters.add(formatTableType(r.table)));

      const sqlCount = normalized.filter((r) => r.result_source === "sql").length;
      const embeddingCount = normalized.filter((r) => r.result_source === "embedding").length;
      const webCount = normalized.filter((r) => r.result_source === "web").length;

      return {
        normalizedResults: normalized,
        counts: { sql: sqlCount, embedding: embeddingCount, web: webCount, total: normalized.length },
        availableFilters: Array.from(filters),
      };
    } catch (e) {
      console.error("Error processing results:", e);
      return {
        normalizedResults: [],
        counts: { sql: 0, embedding: 0, web: 0, total: 0 },
        availableFilters: [],
      };
    }
  }, [scopedData]);

  // ---------- Auto-switch tab based on new results ----------
  useEffect(() => {
    if (resultType === "web" && counts.web > 0) setActiveTab("web");
    else if (counts.sql > 0) setActiveTab("sql");
    else if (counts.embedding > 0) setActiveTab("embedding");
  }, [resultType, counts]);

  // ---------- Filtering / sorting ----------
  const getFilteredResults = useMemo(() => {
    return (tabType: ResultTab) => {
      let filtered = normalizedResults.filter((r) => r.result_source === tabType);

      if (filter !== "all") {
        filtered = filtered.filter((r) => formatTableType(r.table || "") === filter);
      }

      if (searchQuery) {
        const q = searchQuery.toLowerCase();
        filtered = filtered.filter((r) => {
          const text = [
            r.title,
            (r.record as any)?.name,
            (r.record as any)?.device_name,
            (r.record as any)?.plan_name,
            (r.record as any)?.question,
            JSON.stringify(r.record ?? {}),
          ]
            .join(" ")
            .toLowerCase();
          return text.includes(q);
        });
      }

      if (sortBy === "name") {
        filtered.sort((a, b) => getDisplayName(a).localeCompare(getDisplayName(b)));
      } else if (sortBy === "timestamp") {
        filtered.sort(
          (a, b) => new Date(b.timestamp || 0).getTime() - new Date(a.timestamp || 0).getTime()
        );
      } else {
        // relevance (score desc)
        filtered.sort((a, b) => (b.result_score || 0) - (a.result_score || 0));
      }

      return filtered;
    };
  }, [normalizedResults, filter, sortBy, searchQuery]);

  // ---------- Render guards ----------
  if (!isVisible) return null;

  const tabCounts: Record<ResultTab, number> = {
    sql: counts.sql,
    embedding: counts.embedding,
    web: counts.web,
  };

  const filteredResultsForActiveTab = getFilteredResults(activeTab);

  const handleViewDetails = (result: NormalizedResult) => {
    setSelectedResult(result);
    setShowDetailModal(true);
    onViewDetails?.(result);
  };

  return (
    <>
      <div className="flex flex-col h-full">
        {/* Header */}
        <div className="px-6 py-4 border-b flex-shrink-0">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold">Results Panel</h2>
            <div className="flex items-center gap-2">
              {onExportData && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => onExportData(filteredResultsForActiveTab)}
                  className="h-8"
                >
                  <Download className="w-4 h-4 mr-2 text-brand-red" />
                  Export
                </Button>
              )}
              <Button variant="ghost" size="sm" onClick={onClose} className="h-8 w-8 p-0">
                <X className="w-4 h-4 text-brand-red" />
              </Button>
            </div>
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 min-h-0 flex flex-col">
          <Tabs
            value={activeTab}
            onValueChange={(v) => setActiveTab(v as ResultTab)}
            className="flex flex-col h-full"
          >
            {/* Tabs */}
            <TabsList className="grid w-full grid-cols-3 mx-6 mt-4 flex-shrink-0">
              {(["sql", "embedding", "web"] as ResultTab[]).map((tab) => {
                const Icon = getTabIcon(tab);
                return (
                  <TabsTrigger key={tab} value={tab} className="flex items-center gap-2">
                    <Icon className="w-3 h-3 text-brand-red" />
                    <span className="capitalize">{tab}</span>
                    {tabCounts[tab] > 0 && (
                      <Badge variant="secondary" className="text-xs">
                        {tabCounts[tab]}
                      </Badge>
                    )}
                  </TabsTrigger>
                );
              })}
            </TabsList>

            {/* Controls */}
            <div className="px-6 pt-4 pb-4 border-b flex-shrink-0 space-y-3">
              {/* Search */}
              <div className="relative">
                <SearchIcon className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-brand-red" />
                <Input
                  placeholder="Search results..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="h-10 w-full pl-9"
                />
              </div>

              {/* Filters row */}
              <div className="flex gap-2 flex-wrap">
                {/* Type filter */}
                <Select value={filter} onValueChange={setFilter}>
                  <SelectTrigger className="w-40 h-9">
                    <Filter className="w-3 h-3 mr-1 text-brand-red" />
                    <SelectValue placeholder="All Types" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Types</SelectItem>
                    {availableFilters.map((opt) => (
                      <SelectItem key={opt} value={opt}>
                        {opt}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                {/* Sort */}
                <Select value={sortBy} onValueChange={(v) => setSortBy(v as SortOption)}>
                  <SelectTrigger className="w-40 h-9">
                    <SortAsc className="w-3 h-3 mr-1 text-brand-red" />
                    <SelectValue placeholder="Relevance" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="relevance">Relevance</SelectItem>
                    {/* <SelectItem value="name">Name</SelectItem> */}
                    <SelectItem value="timestamp">Date</SelectItem>
                  </SelectContent>
                </Select>

                {/* NEW: Scope */}
                <Select value={scope} onValueChange={(v) => setScope(v as "latest" | "all")}>
                  <SelectTrigger className="w-44 h-9">
                    <Globe className="w-3 h-3 mr-1 text-brand-red" />
                    <SelectValue placeholder="Scope" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="latest">Scope: Latest</SelectItem>
                    <SelectItem value="all">Scope: All Responses</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Results */}
            <div className="flex-1 min-h-0 overflow-y-auto px-6 py-4">
              {(["sql", "embedding", "web"] as ResultTab[]).map((tab) => {
                const tabResults = getFilteredResults(tab);
                return (
                  <TabsContent key={tab} value={tab} className="mt-0 space-y-3 h-full">
                    {tabResults.length === 0 ? (
                      <div className="text-center py-8 text-muted-foreground">
                        <div className="w-12 h-12 mx-auto mb-3 rounded-full bg-muted/50 flex items-center justify-center">
                          <SearchIcon className="w-5 h-5" />
                        </div>
                        <p>No {tab} results found</p>
                        {searchQuery && <p className="text-sm">Try adjusting your search or filters</p>}
                      </div>
                    ) : (
                      <div className="space-y-3">
                        {tabResults.map((result) => {
                          const isSQL = String(result.result_source).toLowerCase() === "sql";
                          return (
                            <Card
                              key={result.id}
                              className="p-4 hover:shadow-md transition-shadow cursor-pointer focus:outline-none focus:ring-2 focus:ring-ring/50"
                              onClick={() => handleViewDetails(result)}
                              role="button"
                              tabIndex={0}
                              onKeyDown={(e) => {
                                if (e.key === "Enter" || e.key === " ") {
                                  e.preventDefault();
                                  handleViewDetails(result);
                                }
                              }}
                            >
                              <div className="space-y-2">
                                <div className="flex items-start justify-between">
                                  <div className="flex-1 min-w-0">
                                    <h4 className="font-medium text-sm truncate">
                                      {getDisplayName(result)}
                                    </h4>
                                    {result.table && (
                                      <p className="text-xs text-muted-foreground">
                                        {formatTableType(result.table)}
                                      </p>
                                    )}
                                  </div>
                                  <div className="flex items-center gap-2 ml-2">
                                    {/* Hide score badge on SQL rows */}
                                    {!isSQL && typeof result.result_score === "number" && (
                                      <Badge variant="outline" className="text-xs">
                                        {Number(result.result_score).toFixed(2)}
                                      </Badge>
                                    )}
                                    <Button
                                      size="sm"
                                      variant="ghost"
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        handleViewDetails(result);
                                      }}
                                    >
                                      <Eye className="w-3 h-3 text-brand-red" />
                                    </Button>
                                  </div>
                                </div>

                                {/* Preview content */}
                                <div className="text-xs text-muted-foreground">
                                  {Object.entries(result.record || {})
                                    .slice(0, 2)
                                    .map(([key, value]) => {
                                      const valStr =
                                        typeof value === "object"
                                          ? JSON.stringify(value)
                                          : String(value ?? "");
                                      return (
                                        <div key={key}>
                                          <span className="font-medium">
                                            {key.replace(/_/g, " ")}:
                                          </span>{" "}
                                          {valStr.length > 50 ? `${valStr.slice(0, 50)}...` : valStr}
                                        </div>
                                      );
                                    })}
                                </div>
                              </div>
                            </Card>
                          );
                        })}
                      </div>
                    )}
                  </TabsContent>
                );
              })}
            </div>
          </Tabs>
        </div>
      </div>

      {showDetailModal && (
        <ResultDetailModal
          key={selectedResult?.id || "empty"}
          result={selectedResult}
          isOpen={showDetailModal}
          onClose={() => setShowDetailModal(false)}
        />
      )}
    </>
  );
};

export default EnhancedResultsPanel;
