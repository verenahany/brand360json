import React, { useEffect, useMemo, useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { NormalizedResult } from '@/components/results/types';
import TableEnhancer from '@/components/tables/TableEnhancer';
import SqlQueryDisplay from './SqlQueryDisplay';
import { Download } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ResultsModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  allResults: {
    sql: NormalizedResult[];
    embedding: NormalizedResult[];
    web: NormalizedResult[];
  };
  /** which tab caller wants to show first */
  activeTab: 'sql' | 'embedding' | 'web' | 'all';
}

const ResultsModal: React.FC<ResultsModalProps> = ({
  isOpen,
  onClose,
  title,
  allResults,
  activeTab,
}) => {
  const { toast } = useToast();

  const sqlData = allResults.sql ?? [];
  const embData = allResults.embedding ?? [];
  const webData = allResults.web ?? [];

  const sqlCount = sqlData.length;
  const embCount = embData.length;
  const webCount = webData.length;
  const allCount = sqlCount + embCount;

  const hasSQL = sqlCount > 0;
  const hasEmbedding = embCount > 0;
  const hasWeb = webCount > 0;

  // Which tab is visible
  const [selectedTab, setSelectedTab] = useState<string>('all');

  // Ensure a tab is selected as soon as the modal opens (no extra click)
  useEffect(() => {
    if (!isOpen) return;

    // If caller passed a preferred tab and it has data, honor it
    const preferred = activeTab ?? 'all';
    const tabHasData =
      (preferred === 'all' && allCount > 0) ||
      (preferred === 'sql' && hasSQL) ||
      (preferred === 'embedding' && hasEmbedding) ||
      (preferred === 'web' && hasWeb);

    if (tabHasData) {
      setSelectedTab(preferred);
      return;
    }

    // Otherwise pick the first available in this priority
    if (hasSQL && hasEmbedding) setSelectedTab('all');
    else if (hasSQL) setSelectedTab('sql');
    else if (hasEmbedding) setSelectedTab('embedding');
    else if (hasWeb) setSelectedTab('web');
    else setSelectedTab('all');
  }, [isOpen, activeTab, hasSQL, hasEmbedding, hasWeb, allCount]);

  // Build the dataset for the active tab
  const currentData: NormalizedResult[] = useMemo(() => {
    switch (selectedTab) {
      case 'sql':
        return sqlData;
      case 'embedding':
        return embData;
      case 'web':
        return webData;
      case 'all':
      default:
        // show SQL + Embedding together in “All”
        return [...sqlData, ...embData];
    }
  }, [selectedTab, sqlData, embData, webData]);

  // Try to surface the SQL query (if present)
  const sqlQuery = useMemo(() => {
    if (selectedTab !== 'sql') return null;
    for (const r of sqlData) {
      if (r.record?.query) return r.record.query;
      if (r.record?.sql) return r.record.sql;
    }
    return null;
  }, [selectedTab, sqlData]);

  // Build columns (prioritize common keys, but include everything)
  const columns = useMemo(() => {
    const set = new Set<string>();
    currentData.forEach((r) => Object.keys(r.record || {}).forEach((k) => set.add(k)));

    // seed + priority ordering
    const priority = [
      'table',
      'title',
      'name',
      'device_name',
      'plan_name',
      'content',
      'snippet',
      'primary_id',
      'internal_id',
      'product_id',
      'amount',
      'availability',
      'brand',
      'brand_name',
      'description',
      'device_type',
      'is_new',
      'timestamp',
    ];

    // helpful fallbacks for embedding records that often only have title/content
    if (selectedTab === 'embedding' || selectedTab === 'all') {
      ['table', 'title', 'content', 'snippet'].forEach((k) => set.add(k));
    }

    const rest = Array.from(set).filter((k) => !priority.includes(k));
    return [...priority.filter((k) => set.has(k)), ...rest];
  }, [currentData, selectedTab]);

  const renderCellValue = (r: NormalizedResult, key: string) => {
    let v = r.record?.[key];

    // smart fallbacks
    if (v == null) {
      if (key === 'table') v = r.table ?? r.record?.table_name;
      else if (key === 'title') v = r.title ?? r.record?.name ?? r.record?.device_name ?? r.record?.plan_name;
      else if (key === 'content' || key === 'snippet') v = r.record?.content ?? r.record?.snippet;
    }

    if (v == null) return <span className="text-muted-foreground italic">null</span>;
    if (typeof v === 'object') return <code className="text-xs bg-muted px-1 py-0.5 rounded">{JSON.stringify(v)}</code>;
    return String(v);
  };

  const exportCSV = () => {
    const rows = currentData.map((r) => r.record).filter(Boolean);
    if (rows.length === 0) {
      toast({
        title: 'No data to export',
        description: 'The current tab has no data to export.',
        variant: 'destructive',
      });
      return;
    }
    const cols = Array.from(new Set(rows.flatMap((r) => Object.keys(r))));
    const csvHeader = cols.join(',');
    const csvRows = rows.map((row) =>
      cols
        .map((col) => {
          const value = row[col];
          if (value == null) return '';
          const s = typeof value === 'object' ? JSON.stringify(value) : String(value);
          return s.includes(',') || s.includes('"') || s.includes('\n') ? `"${s.replace(/"/g, '""')}"` : s;
        })
        .join(',')
    );
    const csv = [csvHeader, ...csvRows].join('\n');
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${selectedTab}-results-${Date.now()}.csv`;
    a.click();
    URL.revokeObjectURL(url);
    toast({ title: 'CSV exported', description: `${selectedTab} results have been exported as CSV` });
  };

  const renderTable = () => {
    if (currentData.length === 0) {
      return (
        <Card className="p-4">
          <p>No {selectedTab} results available.</p>
        </Card>
      );
    }

    return (
      <div className="space-y-4">
        {sqlQuery && <SqlQueryDisplay query={sqlQuery} />}
        <div className="overflow-auto max-h-[60vh]">
          <TableEnhancer>
            <table className="min-w-max w-full text-sm">
              <thead className="sticky top-0 bg-muted z-10">
                <tr className="border-b">
                  {selectedTab === 'all' && <th className="p-2 text-left">Source</th>}
                  <th className="p-2 text-left">Score</th>
                  {columns.map((c) => (
                    <th key={c} className="p-2 text-left font-medium" title={c}>
                      {c}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="[&>tr>td]:align-top">
                {currentData.slice(0, 100).map((r, i) => {
                  const score = typeof r.result_score === 'number' ? r.result_score : Number(r.result_score) || 0;
                  return (
                    <tr key={r.id ?? i} className="border-b hover:bg-muted/50 whitespace-nowrap">
                      {selectedTab === 'all' && (
                        <td className="p-2">
                          <Badge variant={r.result_source === 'embedding' ? 'default' : 'secondary'}>
                            {r.result_source === 'embedding' ? 'Embedding' : 'SQL'}
                          </Badge>
                        </td>
                      )}
                      <td className="p-2">{score ? score.toFixed(4) : '—'}</td>
                      {columns.map((c) => (
                        <td key={c} className="p-2">
                          {renderCellValue(r, c)}
                        </td>
                      ))}
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </TableEnhancer>
        </div>
      </div>
    );
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[85vh] flex flex-col">
        <DialogHeader className="flex-shrink-0">
          <div className="flex items-center justify-between">
            <DialogTitle>{title}</DialogTitle>
            <Button variant="outline" size="sm" onClick={exportCSV} disabled={currentData.length === 0}>
              <Download className="w-3 h-3 mr-1" />
              Export CSV
            </Button>
          </div>
        </DialogHeader>

        <div className="flex-1 overflow-hidden">
          <Tabs value={selectedTab} onValueChange={setSelectedTab} className="h-full flex flex-col">
            <TabsList
              className={`flex-shrink-0 grid w-full ${
                hasSQL && hasEmbedding && hasWeb
                  ? 'grid-cols-4'
                  : hasSQL && hasEmbedding
                  ? 'grid-cols-3'
                  : 'grid-cols-2'
              }`}
            >
              {(hasSQL || hasEmbedding) && (
                <TabsTrigger value="all">
                  All Results <Badge className="ml-2" variant="secondary">{allCount}</Badge>
                </TabsTrigger>
              )}
              {hasSQL && (
                <TabsTrigger value="sql">
                  SQL Results <Badge className="ml-2" variant="secondary">{sqlCount}</Badge>
                </TabsTrigger>
              )}
              {hasEmbedding && (
                <TabsTrigger value="embedding">
                  Embedding Results <Badge className="ml-2" variant="secondary">{embCount}</Badge>
                </TabsTrigger>
              )}
              {hasWeb && (
                <TabsTrigger value="web">
                  Web Results <Badge className="ml-2" variant="secondary">{webCount}</Badge>
                </TabsTrigger>
              )}
            </TabsList>

            <div className="flex-1 overflow-hidden">
              <TabsContent value="all" className="h-full overflow-y-auto max-h-[65vh] p-1">
                {renderTable()}
              </TabsContent>
              <TabsContent value="sql" className="h-full overflow-y-auto max-h-[65vh] p-1">
                {renderTable()}
              </TabsContent>
              <TabsContent value="embedding" className="h-full overflow-y-auto max-h-[65vh] p-1">
                {renderTable()}
              </TabsContent>
              <TabsContent value="web" className="h-full overflow-y-auto max-h-[65vh] p-1">
                {/* (You can render your web card view here if you want) */}
                {webCount === 0 ? (
                  <Card className="p-4"><p>No web results available.</p></Card>
                ) : (
                  renderTable()
                )}
              </TabsContent>
            </div>
          </Tabs>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ResultsModal;
