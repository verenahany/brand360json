import React, { useMemo, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Copy, Download, ExternalLink, Check } from "lucide-react";
import { NormalizedResult, ViewMode } from "./types";
import { useToast } from "@/hooks/use-toast";

interface ResultDetailModalProps {
  result: NormalizedResult | null;
  isOpen: boolean;
  onClose: () => void;
}

const ResultDetailModal: React.FC<ResultDetailModalProps> = ({
  result,
  isOpen,
  onClose,
}) => {
  const [viewMode, setViewMode] = useState<ViewMode>("formatted");
  const [copiedJson, setCopiedJson] = useState(false);
  const { toast } = useToast();

  if (!result) return null;

  const isSQL = String(result.result_source).toLowerCase() === "sql";

  const handleCopyJson = async () => {
    try {
      await navigator.clipboard.writeText(JSON.stringify(result, null, 2));
      setCopiedJson(true);
      toast({ title: "JSON copied", description: "Result data copied." });
      setTimeout(() => setCopiedJson(false), 1800);
    } catch {
      toast({
        title: "Copy failed",
        description: "Could not copy JSON.",
        variant: "destructive",
      });
    }
  };

  const handleExportCsv = () => {
    try {
      // Export the RECORD content (common need) but still flattened and faithful
      const flat = flattenObject(result.record);
      const headers = Object.keys(flat);
      const values = headers.map((h) => formatCsvCell(flat[h]));

      const csv = [headers.join(","), values.join(",")].join("\n");
      const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `result-${result.id}-${Date.now()}.csv`;
      a.click();
      URL.revokeObjectURL(url);

      toast({ title: "CSV exported", description: "Download started." });
    } catch {
      toast({
        title: "Export failed",
        description: "Could not export CSV.",
        variant: "destructive",
      });
    }
  };

  const handleOpenLink = () => {
    if (result.url) window.open(result.url, "_blank", "noopener,noreferrer");
  };

  // ---- helpers --------------------------------------------------------------

  function formatCsvCell(v: unknown) {
    const s =
      v === null || v === undefined
        ? ""
        : typeof v === "object"
        ? JSON.stringify(v)
        : String(v);
    return /[",\n]/.test(s) ? `"${s.replace(/"/g, '""')}"` : s;
  }

  // Flattener that also handles arrays: a[0].b -> "a[0].b"
  function flattenObject(obj: any, prefix = ""): Record<string, any> {
    const out: Record<string, any> = {};
    const add = (k: string, v: any) => (out[k] = v);

    if (obj === null || obj === undefined) return out;

    if (Array.isArray(obj)) {
      obj.forEach((v, i) => {
        const key = `${prefix}[${i}]`;
        if (v && typeof v === "object") {
          Object.assign(out, flattenObject(v, key));
        } else {
          add(key, v);
        }
      });
      return out;
    }

    if (typeof obj === "object") {
      Object.keys(obj).forEach((k) => {
        const v = obj[k];
        const key = prefix ? `${prefix}.${k}` : k;
        if (v && typeof v === "object") {
          Object.assign(out, flattenObject(v, key));
        } else {
          add(key, v);
        }
      });
      return out;
    }

    // primitive
    add(prefix || "value", obj);
    return out;
  }

  const flattenedAllFields = useMemo(() => {
    // Flatten the WHOLE result (not just record) so it always matches Raw JSON
    const flat = flattenObject(result);
    // Sort keys for stable display
    return Object.fromEntries(Object.entries(flat).sort(([a], [b]) => a.localeCompare(b)));
  }, [result]);

  const renderValue = (value: any) => {
    if (value === null || value === undefined) return <span className="italic text-muted-foreground">null</span>;
    if (typeof value === "object") {
      return (
        <pre className="text-xs bg-muted p-2 rounded overflow-auto max-h-40">
          {JSON.stringify(value, null, 2)}
        </pre>
      );
    }
    return String(value);
    }

  // ---- views ----------------------------------------------------------------

  const renderFormattedView = () => {
    // Show a compact header with key metadata, then a faithful dump of record keys
    const metaRows: Array<[string, any]> = [
      ["ID", result.id],
      ["Source", result.result_source],
      ["Table", result.table],
      ["Title", result.title],
      ["URL", result.url],
      ["Timestamp", result.timestamp],
      // Score visible for non-SQL only
      ...(!isSQL ? [["Score", result.result_score]] : []),
    ].filter(([, v]) => v !== undefined && v !== null && v !== "");

    return (
      <div className="space-y-6">
        {/* Meta */}
        <div className="grid gap-2">
          {metaRows.map(([k, v]) => (
            <div key={k} className="grid grid-cols-3 gap-2">
              <dt className="text-sm font-medium text-muted-foreground">{k}</dt>
              <dd className="col-span-2 text-sm break-words">{renderValue(v)}</dd>
            </div>
          ))}
        </div>

        {/* Record */}
        <div className="space-y-2">
          <h4 className="text-sm font-semibold">Record</h4>
          <div className="grid gap-3">
            {Object.entries(result.record ?? {}).map(([key, value]) => (
              <div key={key} className="grid grid-cols-3 gap-2">
                <dt className="text-sm font-medium text-muted-foreground break-words">
                  {key}
                </dt>
                <dd className="col-span-2 text-sm break-words">{renderValue(value)}</dd>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };

  const renderAllFieldsView = () => {
    return (
      <div className="space-y-2">
        {Object.entries(flattenedAllFields).map(([key, value]) => (
          <div key={key} className="grid grid-cols-3 gap-2 py-1 border-b border-border/50">
            <dt className="text-sm font-medium text-muted-foreground break-words">
              {key}
            </dt>
            <dd className="col-span-2 text-sm break-words">
              {typeof value === "object" ? JSON.stringify(value) : String(value ?? "null")}
            </dd>
          </div>
        ))}
      </div>
    );
  };

  const renderRawView = () => (
    <pre className="text-xs bg-muted p-4 rounded-md overflow-auto max-h-[65vh]">
      {JSON.stringify(result, null, 2)}
    </pre>
  );

  const getDisplayTitle = (r: NormalizedResult): string => {
    if (r.title) return r.title;
    const rec = r.record || {};
    for (const k of ["name", "title", "device_name", "plan_name", "question"]) {
      if (rec[k]) return rec[k];
    }
    return `${r.result_source} Result`;
  };

  const formatTableName = (tableName?: string): string =>
    (tableName || "")
      .replace(/([A-Z])/g, " $1")
      .replace(/_/g, " ")
      .trim()
      .replace(/\b\w/g, (l) => l.toUpperCase());

  // ---- UI -------------------------------------------------------------------

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[85vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <DialogTitle className="flex items-center justify-between">
            <span>Result Details</span>
            <div className="flex items-center gap-2">
              <Button size="sm" variant="outline" onClick={handleCopyJson} disabled={copiedJson}>
                {copiedJson ? (
                  <>
                    <Check className="w-3 h-3 mr-1" />
                    Copied
                  </>
                ) : (
                  <>
                    <Copy className="w-3 h-3 mr-1" />
                    Copy JSON
                  </>
                )}
              </Button>
              <Button size="sm" variant="outline" onClick={handleExportCsv}>
                <Download className="w-3 h-3 mr-1" />
                Export CSV
              </Button>
              {result.url && (
                <Button size="sm" variant="outline" onClick={handleOpenLink}>
                  <ExternalLink className="w-3 h-3 mr-1" />
                  Open Link
                </Button>
              )}
            </div>
          </DialogTitle>
        </DialogHeader>

        {/* Top tags */}
        <div className="px-6 pt-1 flex items-center gap-2">
          <Badge variant="outline">{String(result.result_source)}</Badge>
          {result.table && <Badge variant="secondary">{formatTableName(result.table)}</Badge>}
          {/* Hide score for SQL */}
          {!isSQL && typeof result.result_score === "number" && (
            <Badge variant="outline">Score: {result.result_score.toFixed(4)}</Badge>
          )}
        </div>

        <Tabs
          value={viewMode}
          onValueChange={(v) => setViewMode(v as ViewMode)}
          className="flex-1 overflow-hidden mt-3"
        >
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="formatted">Formatted</TabsTrigger>
            <TabsTrigger value="all">All Fields</TabsTrigger>
            <TabsTrigger value="raw">Raw JSON</TabsTrigger>
          </TabsList>

          <div className="mt-4 overflow-y-auto flex-1">
            <TabsContent value="formatted" className="mt-0">
              {renderFormattedView()}
            </TabsContent>
            <TabsContent value="all" className="mt-0">
              {renderAllFieldsView()}
            </TabsContent>
            <TabsContent value="raw" className="mt-0">
              {renderRawView()}
            </TabsContent>
          </div>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
};

export default ResultDetailModal;
