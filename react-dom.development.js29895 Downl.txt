import React, { useMemo, useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { NormalizedResult } from "@/components/results/types";
import TableEnhancer from "@/components/tables/TableEnhancer";
import SqlQueryDisplay from "./SqlQueryDisplay";
import { Globe, ExternalLink, Copy, Download } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface ResultsModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  allResults: {
    sql: NormalizedResult[];
    embedding: NormalizedResult[];
    web: NormalizedResult[];
  };
  activeTab: "sql" | "embedding" | "web";
}

const ResultsModal: React.FC<ResultsModalProps> = ({
  isOpen,
  onClose,
  title,
  allResults,
  activeTab,
}) => {
  const [selectedTab, setSelectedTab] = useState<string>(activeTab);
  const { toast } = useToast();

  // --- helpers ---------------------------------------------------------------

  const hasSQL = (allResults.sql || []).length > 0;
  const hasEmbedding = (allResults.embedding || []).length > 0;
  const hasWeb = (allResults.web || []).length > 0;

  const sqlQuery = useMemo(() => {
    for (const r of allResults.sql || []) {
      if (r.record?.query) return r.record.query;
      if (r.record?.sql) return r.record.sql;
    }
    return null;
  }, [allResults.sql]);

  const currentData: NormalizedResult[] = useMemo(() => {
    switch (selectedTab) {
      case "all":
        // Preserve item + source one-to-one; do NOT map to plain rows here
        return [...(allResults.sql || []), ...(allResults.embedding || [])];
      case "sql":
        return allResults.sql || [];
      case "embedding":
        return allResults.embedding || [];
      case "web":
        return allResults.web || [];
      default:
        return [];
    }
  }, [selectedTab, allResults]);

  // Build column list from currentData records (union) with a sensible order
  const columns = useMemo(() => {
    const set = new Set<string>();
    currentData.forEach((r) => {
      Object.keys(r.record || {}).forEach((k) => set.add(k));
    });

    const priority = [
      "table",
      "title",
      "name",
      "device_name",
      "plan_name",
      "question",
      "primary_id",
      "internal_id",
      "product_id",
      "amount",
      "availability",
      "brand",
      "brand_name",
      "description",
      "device_type",
      "is_new",
      "timestamp",
    ];

    const rest = Array.from(set).filter((k) => !priority.includes(k));
    return [...priority.filter((k) => set.has(k)), ...rest];
  }, [currentData]);

  const exportCSV = () => {
    if (currentData.length === 0) {
      toast({
        title: "No data to export",
        description: "The current tab has no data to export.",
        variant: "destructive",
      });
      return;
    }

    const syntheticCols = ["result_source", "result_score"]; // always present in CSV
    const header = [...syntheticCols, ...columns];
    const csvRows = currentData.map((r) => {
      const row = [
        r.result_source ?? "",
        r.result_score ?? "",
        ...columns.map((c) => {
          const v = r.record?.[c];
          if (v === null || v === undefined) return "";
          const s = typeof v === "object" ? JSON.stringify(v) : String(v);
          return /[",\n]/.test(s) ? `"${s.replace(/"/g, '""')}"` : s;
        }),
      ];
      return row.join(",");
    });

    const csv = [header.join(","), ...csvRows].join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${selectedTab}-results-${Date.now()}.csv`;
    a.click();
    URL.revokeObjectURL(url);
    toast({ title: "CSV exported", description: "Download started." });
  };

  // --- renderers -------------------------------------------------------------

  const renderWebResults = () => {
    const webResults = allResults.web || [];
    if (webResults.length === 0) {
      return (
        <Card className="p-4">
          <p>No web results available.</p>
        </Card>
      );
    }

    return (
      <div className="space-y-4">
        {webResults.map((result, i) => {
          const record = result.record || {};
          const title = record.title || result.title || "No title";
          const url = record.url || result.url || "";
          const content = record.content || record.snippet || "No content";
          const score = result.result_score || 0;

          let domain = "Unknown source";
          try {
            if (url) domain = new URL(url).hostname.replace(/^www\./, "");
          } catch {
            domain = url.split("/")[2]?.replace(/^www\./, "") || "Unknown source";
          }

          return (
            <Card key={i} className="p-4">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <Globe className="w-4 h-4" />
                  <span>{domain}</span>
                </div>
                {score > 0 && <Badge variant="secondary">{(score * 100).toFixed(1)}% match</Badge>}
              </div>

              <h4 className="font-semibold mb-2">
                {url ? (
                  <a href={url} target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                    {title}
                  </a>
                ) : (
                  title
                )}
              </h4>

              {url && (
                <div className="flex items-center gap-2 mb-2 text-sm">
                  <a href={url} target="_blank" rel="noopener noreferrer" className="text-muted-foreground hover:underline truncate">
                    {url}
                  </a>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => navigator.clipboard.writeText(url)}
                    className="p-1 h-auto"
                    title="Copy URL"
                  >
                    <Copy className="w-3 h-3" />
                  </Button>
                </div>
              )}

              <p className="text-sm text-muted-foreground mb-3">{content}</p>

              {url && (
                <Button variant="outline" size="sm" asChild>
                  <a href={url} target="_blank" rel="noopener noreferrer">
                    <ExternalLink className="w-3 h-3 mr-1" />
                    Visit Website
                  </a>
                </Button>
              )}
            </Card>
          );
        })}
      </div>
    );
  };

  const renderTableResults = () => {
    if (currentData.length === 0) {
      return (
        <Card className="p-4">
          <p>
            No{" "}
            {selectedTab === "all"
              ? "results"
              : selectedTab === "sql"
              ? "SQL results"
              : "Embedding results"}{" "}
            available.
          </p>
        </Card>
      );
    }

    return (
      <div className="space-y-4">
        {/* SQL query preview (only in SQL tab) */}
        {selectedTab === "sql" && sqlQuery && <SqlQueryDisplay query={sqlQuery} />}

        {/* Responsive, scrollable data table */}
        <div className="overflow-auto max-h-[60vh]">
          <TableEnhancer>
            <table className="min-w-max w-full text-sm">
              <thead className="sticky top-0 bg-muted z-10">
                <tr className="border-b">
                  {/* synthetic columns always first */}
                  {selectedTab === "all" && <th className="p-2 text-left">Source</th>}
                  <th className="p-2 text-left">Score</th>
                  {columns.map((c) => (
                    <th key={c} className="p-2 text-left font-medium" title={c}>
                      {c}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="[&>tr>td]:align-top">
                {currentData.slice(0, 100).map((r, idx) => {
                  const src = r.result_source;
                  const score =
                    typeof r.result_score === "number" ? r.result_score : Number(r.result_score) || 0;

                  return (
                    <tr key={r.id ?? idx} className="border-b hover:bg-muted/50 whitespace-nowrap">
                      {selectedTab === "all" && (
                        <td className="p-2">
                          <Badge variant={src === "embedding" ? "default" : "secondary"}>
                            {src === "embedding" ? "Embedding" : "SQL"}
                          </Badge>
                        </td>
                      )}
                      <td className="p-2">{score ? score.toFixed(4) : "â€”"}</td>
                      {columns.map((c) => {
                        const v = r.record?.[c];
                        return (
                          <td key={c} className="p-2">
                            {v === null || v === undefined ? (
                              <span className="text-muted-foreground italic">null</span>
                            ) : typeof v === "object" ? (
                              <code className="text-xs bg-muted px-1 py-0.5 rounded">{JSON.stringify(v)}</code>
                            ) : (
                              String(v)
                            )}
                          </td>
                        );
                      })}
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </TableEnhancer>
        </div>

        {currentData.length > 100 && (
          <Card className="p-3">
            <p className="text-sm text-muted-foreground">
              Showing first 100 rows of {currentData.length} total results.
            </p>
          </Card>
        )}
      </div>
    );
  };

  // --- UI --------------------------------------------------------------------

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[85vh] flex flex-col">
        <DialogHeader className="flex-shrink-0">
          <div className="flex items-center justify-between">
            <DialogTitle>{title}</DialogTitle>
            <Button variant="outline" size="sm" onClick={exportCSV} disabled={currentData.length === 0}>
              <Download className="w-3 h-3 mr-1" />
              Export CSV
            </Button>
          </div>
        </DialogHeader>

        <div className="flex-1 overflow-hidden">
          <Tabs value={selectedTab} onValueChange={setSelectedTab} className="h-full flex flex-col">
            <TabsList className="grid w-full grid-cols-4 flex-shrink-0">
              {(hasSQL || hasEmbedding) && (
                <TabsTrigger value="all">
                  All Results {(allResults.sql?.length || 0) + (allResults.embedding?.length || 0)}
                </TabsTrigger>
              )}
              {hasSQL && <TabsTrigger value="sql">SQL Results {allResults.sql?.length || 0}</TabsTrigger>}
              {hasEmbedding && (
                <TabsTrigger value="embedding">Embedding Results {allResults.embedding?.length || 0}</TabsTrigger>
              )}
              {hasWeb && <TabsTrigger value="web">Web Results {allResults.web?.length || 0}</TabsTrigger>}
            </TabsList>

            <div className="flex-1 overflow-hidden">
              <TabsContent value="all" className="h-full overflow-y-auto p-1">
                {renderTableResults()}
              </TabsContent>
              <TabsContent value="sql" className="h-full overflow-y-auto p-1">
                {renderTableResults()}
              </TabsContent>
              <TabsContent value="embedding" className="h-full overflow-y-auto p-1">
                {renderTableResults()}
              </TabsContent>
              <TabsContent value="web" className="h-full overflow-y-auto p-1">
                {renderWebResults()}
              </TabsContent>
            </div>
          </Tabs>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ResultsModal;
