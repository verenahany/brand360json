import React, { useState, useMemo } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Copy, Download, ExternalLink, Check } from 'lucide-react';
import { NormalizedResult, ViewMode } from './types';
import { useToast } from '@/hooks/use-toast';

interface ResultDetailModalProps {
  result: NormalizedResult | null;
  isOpen: boolean;
  onClose: () => void;
}

const ResultDetailModal: React.FC<ResultDetailModalProps> = ({
  result,
  isOpen,
  onClose,
}) => {
  const [viewMode, setViewMode] = useState<ViewMode>('formatted');
  const [copiedJson, setCopiedJson] = useState(false);
  const { toast } = useToast();

  if (!result) return null;

  const isSQL = (result.result_source || '').toLowerCase() === 'sql';

  const safeString = (val: unknown) => {
    if (val === null || val === undefined) return 'null';
    if (typeof val === 'string') return val;
    // Pretty stringify objects/arrays; keep single-line short values short
    try {
      const s = JSON.stringify(val);
      return s.length > 120 ? JSON.stringify(val, null, 2) : s;
    } catch {
      return String(val);
    }
  };

  const flattenObject = (obj: any, prefix = ''): Record<string, any> => {
    const out: Record<string, any> = {};
    if (!obj || typeof obj !== 'object') return out;

    for (const key of Object.keys(obj)) {
      const val = obj[key];
      const newKey = prefix ? `${prefix}.${key}` : key;

      if (Array.isArray(val)) {
        out[newKey] = val; // keep arrays as arrays; display via safeString
      } else if (val && typeof val === 'object') {
        Object.assign(out, flattenObject(val, newKey));
      } else {
        out[newKey] = val;
      }
    }
    return out;
  };

  const rawJson = useMemo(() => result, [result]);

  // All Fields is derived directly from raw JSON for parity (except hiding score for SQL)
  const flattenedAll = useMemo(() => {
    const flat = flattenObject(rawJson);
    if (isSQL) {
      // Hide only the score field when source is SQL
      if ('result_score' in flat) delete flat['result_score'];
    }
    return flat;
  }, [rawJson, isSQL]);

  const handleCopyJson = async () => {
    try {
      await navigator.clipboard.writeText(JSON.stringify(rawJson, null, 2));
      setCopiedJson(true);
      toast({
        title: 'JSON copied',
        description: 'Result data has been copied to clipboard',
      });
      setTimeout(() => setCopiedJson(false), 2000);
    } catch (error) {
      toast({
        title: 'Copy failed',
        description: 'Failed to copy JSON data',
        variant: 'destructive',
      });
    }
  };

  const handleExportCsv = () => {
    try {
      const flatData = flattenObject(result.record || {});
      const headers = Object.keys(flatData);
      const values = Object.values(flatData);

      const csvContent = [
        headers.join(','),
        values.map((v) => `"${String(v).replace(/"/g, '""')}"`).join(','),
      ].join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `result-${result.id}-${Date.now()}.csv`;
      link.click();
      URL.revokeObjectURL(url);

      toast({
        title: 'CSV exported',
        description: 'Result data has been exported as CSV',
      });
    } catch (error) {
      toast({
        title: 'Export failed',
        description: 'Failed to export CSV data',
        variant: 'destructive',
      });
    }
  };

  const handleOpenLink = () => {
    if (result.url) window.open(result.url, '_blank', 'noopener,noreferrer');
  };

  const renderFormattedView = () => {
    const record = result.record || {};
    return (
      <div className="space-y-4">
        {/* Header Info */}
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold">{getDisplayTitle(result)}</h3>
            <div className="flex items-center gap-2 mt-1">
              <Badge variant="outline">{result.result_source}</Badge>
              {result.table && (
                <Badge variant="secondary">{formatTableName(result.table)}</Badge>
              )}
              {/* Show score only when not SQL and result_score > 0 */}
              {!isSQL && result.result_score > 0 && (
                <Badge variant="outline">
                  Score: {Number(result.result_score).toFixed(2)}
                </Badge>
              )}
            </div>
          </div>
        </div>

        {/* Record fields (from raw record, 1:1) */}
        <div className="grid gap-3">
          {Object.entries(record).map(([key, value]) => {
            if (key === 'id' || key === 'table') return null;
            const rendered =
              typeof value === 'string' && value.length > 240
                ? value
                : safeString(value);

            const isMultiline =
              typeof rendered === 'string' && rendered.includes('\n');

            return (
              <div key={key} className="grid grid-cols-3 gap-2">
                <dt className="text-sm font-medium text-muted-foreground capitalize break-words">
                  {key.replace(/_/g, ' ')}
                </dt>
                <dd className="col-span-2 text-sm break-words">
                  {isMultiline ? (
                    <pre className="max-h-40 overflow-auto whitespace-pre-wrap sidebar-scroll-modern p-2 bg-muted/50 rounded">
                      {rendered}
                    </pre>
                  ) : (
                    <span className="block">{rendered}</span>
                  )}
                </dd>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  const renderAllFieldsView = () => {
    return (
      <div className="space-y-2">
        {Object.entries(flattenedAll).map(([key, value]) => {
          // Also guard in case upstream adds aliases of score
          if (isSQL && key.endsWith('result_score')) return null;
          const rendered = safeString(value);
          const isMultiline =
            typeof rendered === 'string' && rendered.includes('\n');
          return (
            <div
              key={key}
              className="grid grid-cols-3 gap-2 py-1 border-b border-border/50"
            >
              <dt className="text-sm font-medium text-muted-foreground break-words">
                {key}
              </dt>
              <dd className="col-span-2 text-sm break-words">
                {isMultiline ? (
                  <pre className="max-h-40 overflow-auto whitespace-pre-wrap sidebar-scroll-modern">
                    {rendered}
                  </pre>
                ) : (
                  rendered
                )}
              </dd>
            </div>
          );
        })}
      </div>
    );
  };

  const renderRawView = () => {
    return (
      <pre className="text-xs bg-muted p-4 rounded-md overflow-auto max-h-96 sidebar-scroll-modern">
        {JSON.stringify(rawJson, null, 2)}
      </pre>
    );
  };

  const getDisplayTitle = (r: NormalizedResult): string => {
    if (r.title) return r.title;
    const record = r.record || {};
    const titleFields = ['name', 'title', 'device_name', 'plan_name', 'question'];
    for (const field of titleFields) {
      if (record[field]) return String(record[field]);
    }
    return `${r.result_source} Result`;
  };

  const formatTableName = (tableName: string): string =>
    tableName
      .replace(/([A-Z])/g, ' $1')
      .replace(/_/g, ' ')
      .trim()
      .replace(/\b\w/g, (l) => l.toUpperCase());

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[85vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <DialogTitle className="flex items-center justify-between">
            <span>Result Details</span>
            <div className="flex items-center gap-2">
              <Button
                size="sm"
                variant="outline"
                onClick={handleCopyJson}
                disabled={copiedJson}
              >
                {copiedJson ? (
                  <>
                    <Check className="w-3 h-3 mr-1" />
                    Copied
                  </>
                ) : (
                  <>
                    <Copy className="w-3 h-3 mr-1" />
                    Copy JSON
                  </>
                )}
              </Button>
              <Button size="sm" variant="outline" onClick={handleExportCsv}>
                <Download className="w-3 h-3 mr-1" />
                Export CSV
              </Button>
              {result.url && (
                <Button size="sm" variant="outline" onClick={handleOpenLink}>
                  <ExternalLink className="w-3 h-3 mr-1" />
                  Open Link
                </Button>
              )}
            </div>
          </DialogTitle>
        </DialogHeader>

        <Tabs
          value={viewMode}
          onValueChange={(v) => setViewMode(v as ViewMode)}
          className="flex-1 overflow-hidden"
        >
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="formatted">Formatted</TabsTrigger>
            <TabsTrigger value="all">All Fields</TabsTrigger>
            <TabsTrigger value="raw">Raw JSON</TabsTrigger>
          </TabsList>

          <div className="mt-4 overflow-y-auto flex-1 sidebar-scroll-modern">
            <TabsContent value="formatted" className="mt-0">
              {renderFormattedView()}
            </TabsContent>
            <TabsContent value="all" className="mt-0">
              {renderAllFieldsView()}
            </TabsContent>
            <TabsContent value="raw" className="mt-0">
              {renderRawView()}
            </TabsContent>
          </div>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
};

export default ResultDetailModal;
